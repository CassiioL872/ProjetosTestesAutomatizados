package br.ce.wcaquino.rest;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.junit.*;

import io.restassured.RestAssured;
import io.restassured.RestAssured.*;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class UserJsonTest {

	@Test
	public void deveVerificarPrimeiroNivel() {
		given()
		.when()
			.get("https://restapi.wcaquino.me/users/1")
		.then()
			.statusCode(200)
			.body("id", is(1))
			.body("name", containsString("Silva"))
			.body("age", greaterThan(18))
	;}
	
	@Test
	public void deveVerificarPrimeiroNivelComOutrasFormas() {
		Response response = RestAssured.get("https://restapi.wcaquino.me/users/1");
		
		Assert.assertEquals(new Integer(1), response.path("id"));
		
		JsonPath json = new JsonPath(response.asString());
		//Assert.assertEquals(1, json.getInt("1"));
	}
	
	@Test
	public void deveValidarTerceiroId() {
		given()
		.when()
			.get("https://restapi.wcaquino.me/users/2")
		.then()
			.statusCode(200)
			.body("id", is(2))
			.body("name", containsString("Maria Joaquina"))
			.body("endereco.rua", is("Rua dos bobos"))
			;}
	


	@Test
	public void deveValidarLista() {
		given().
		when()
			.get("https://restapi.wcaquino.me/users/3").
		then().
			statusCode(200).
			body("filhos", hasSize(2)).
			body("filhos[0].name", is("Zezinho"))
			.body("filhos[1].name",  is("Luizinho"))
			
		;}

	@Test
	public void deveRetornarMensagemUsuarioInexistente() {
		
		given().
		when()
			.get("https://restapi.wcaquino.me/users/4").
		then().
			statusCode(404).
			body("error", is("Usuário inexistente"))
		
	;}
	
	
	@Test
	public void deveVerificarListaRaiz() {
		given().
		when()
			.get("https://restapi.wcaquino.me/users").
		then().
			statusCode(200).
			body("", hasItem("João da Silva", "Maria Joaquina", "Ana Júlia"))
		
		
	;}
	
}
